import 'package:universal_html/html.dart' as html;
import '../data/models.dart';

/// Servicio de gu√≠a por voz compatible con Web
class VoiceGuideServiceWeb {
  static bool _isInitialized = false;
  static html.SpeechSynthesis? _speechSynthesis;
  
  /// Inicializar el servicio de TTS para Web
  static Future<void> initialize() async {
    try {
      if (html.window.speechSynthesis != null) {
        _speechSynthesis = html.window.speechSynthesis;
        _isInitialized = true;
        
        print('üé§ TTS Web inicializado correctamente');
      } else {
        print('‚ö†Ô∏è TTS no soportado en este navegador');
      }
    } catch (e) {
      print('‚ùå Error inicializando TTS Web: $e');
    }
  }
  
  /// Reproducir texto
  static Future<void> speak(String text) async {
    if (!_isInitialized || _speechSynthesis == null) {
      print('‚ö†Ô∏è TTS no inicializado');
      return;
    }
    
    try {
      // Cancelar cualquier s√≠ntesis en curso
      _speechSynthesis!.cancel();
      
      // Crear utterance con configuraci√≥n b√°sica
      final utterance = html.SpeechSynthesisUtterance(text);
      
      // Reproducir
      _speechSynthesis!.speak(utterance);
      
      print('üé§ Reproduciendo: $text');
    } catch (e) {
      print('‚ùå Error reproduciendo texto: $e');
    }
  }
  
  /// Detener s√≠ntesis
  static void stop() {
    if (_speechSynthesis != null) {
      _speechSynthesis!.cancel();
      print('üõë TTS detenido');
    }
  }
  
  /// Verificar si est√° disponible
  static bool get isAvailable => _isInitialized && _speechSynthesis != null;
  
  /// Actualizar configuraci√≥n de voz
  static void updateVoiceSettings() {
    // La configuraci√≥n se aplica en el pr√≥ximo speak()
    print('üé§ Configuraci√≥n de voz actualizada');
  }
  
  /// Obtener voces disponibles
  static List<html.SpeechSynthesisVoice> getAvailableVoices() {
    if (_speechSynthesis != null) {
      return _speechSynthesis!.getVoices();
    }
    return [];
  }
}